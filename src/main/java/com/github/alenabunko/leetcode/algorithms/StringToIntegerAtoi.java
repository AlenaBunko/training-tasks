package com.github.alenabunko.leetcode.algorithms;

/**
 * Задача Строка в целое число(atoi)
 * <a href="https://leetcode.com/problems/string-to-integer-atoi/description/">...</a>
 * Реализуйте функцию myAtoi(string s), которая преобразует строку в 32-разрядное целое число со знаком (аналогично функции atoi C/C++).
 * Алгоритм для myAtoi(string s) следующий:
 * Прочтите и игнорируйте начальные пробелы.
 * Проверьте, является ли следующий символ (если он еще не находится в конце строки) «-» или «+». Прочтите этот символ, если он есть.
 * Это определяет, будет ли окончательный результат отрицательным или положительным соответственно. Предположим, что результат
 * положительный, если ни один из них не присутствует.
 * Считайте следующие символы, пока не будет достигнут следующий нецифровой символ или конец ввода. Остальная часть строки игнорируется.
 * Преобразуйте эти цифры в целое число (например, «123» -> 123, «0032» -> 32). Если цифры не были прочитаны, то целое число равно 0.
 * При необходимости измените знак (из шага 2).
 * Если целое число выходит за пределы диапазона 32-битных целых чисел со знаком [-2^31, 2^31 - 1], зафиксируйте целое число,
 * чтобы оно оставалось в диапазоне. В частности, целые числа меньше -2^31 должны быть сжаты до -2^31, а целые числа больше 2^31-1 должны
 * быть сжаты до 2^31-1.
 * Возвращает целое число в качестве окончательного результата.
 * Примечание:
 * Только символ пробела ' ' считается символом пробела.
 * Не игнорируйте никакие символы, кроме начального пробела или остальной части строки после цифр.
 * Ограничения:
 * 0 <= s.length <= 200
 * s состоит из английских букв (строчных и прописных), цифр (0-9), ' ', '+', '-' и '.'.
 */
public class StringToIntegerAtoi {

    /**
     * Метод возвращает число в диапазоне [-2^31; 2^31 - 1]
     *
     * @param s строка
     * @return число в диапазоне [-2^31; 2^31 - 1], если число превышает граничные значения, то вернуть граничные значения
     */
    public int myAtoi(String s) {
        char[] tempResult = s.toCharArray();
        int startIndex = 0;
        int numberSing = 1;

        for (int i = 0; i < tempResult.length; i++) {
            if (tempResult[startIndex] == '-') {
                startIndex += 1;
                numberSing = -1;
                break;
            } else if (tempResult[startIndex] == '+') {
                startIndex += 1;
                break;
            } else if (tempResult[startIndex] == ' ' && tempResult.length != 1) {
                startIndex += 1;
            }
        }

        long res = 0;
        for (int i = startIndex; i < tempResult.length; i++) {

            if (tempResult[i] >= '0' && tempResult[i] <= '9') {
                res = res * 10 + (tempResult[i] - '0');

                if (res * numberSing > Integer.MAX_VALUE) {
                    return Integer.MAX_VALUE;
                } else if (res * numberSing < Integer.MIN_VALUE) {
                    return Integer.MIN_VALUE;
                }

            } else {
                break;
            }
        }
        return (int) res * numberSing;

    }
}
